method == "scDesign3" & is.null(prior_info$spatial.y) & "spatial" %in% input$functionality){
estimate_prior[["spatial.x"]] <- 1:ncol(ref_data)
estimate_prior[["spatial.y"]] <- 1:ncol(ref_data)
}
estimation_prior <- list(ref_data = ref_data,
other_prior = list(group.condition = estimate_prior$group.condition,
batch.condition = estimate_prior$batch.condition),
verbose = FALSE,
seed = as.integer(runif(1, min = 1, max = .Machine$integer.max)))
arguments <- estimation_prior[intersect(names(estimation_prior), names(formals(estimate_function_name)))]
estimated_parameters <- do.call(estimate_function_name, arguments)
View(arguments)
parameters <- estimated_parameters$estimate_result
############################################################################
############################ Simulate Datasets #############################
############################################################################
### simulation function
simulate_function_name <- paste0(sub_method, "_simulation")
assign(simulate_function_name, get(simulate_function_name, envir = env))
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
View(new_prior)
new_prior <- change_parameter_value(new_prior)
simulate_prior
View(new_prior)
devtools::load_all()
run_app()
View(new_prior)
simulate_prior
devtools::load_all()
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
new_prior <- change_parameter_value(new_prior)
View(new_prior)
run_app()
devtools::load_all()
run_app()
method <- "SCRIP-BP"
cell_num <- 2000
gene_num <- 1000
if(cell_num == 0){
cell_num <- ncol(ref_data)
}
gene_num <- input$gene_num_simulate
if(gene_num == 0){
gene_num <- nrow(ref_data)
}
group_num <- 2
DEGs_prop <- 0.4
batch_num <- 2
prior_info
### method split and simulate prior
simulate_prior <- list(cell_num = cell_num,
gene_num = gene_num,
group_num = group_num,
batch_num = batch_num,
DEGs = DEGs_prop)
simulate_prior
# method <- stringr::str_replace(method, pattern = "—", replacement = "-")
split_name <- stringr::str_split(method, "-", simplify = TRUE)[1, ]
if(length(split_name) == 2){
if(split_name[1] == "SCRIP"){
mode <- "BP"
}else{
simulate_prior[[split_name[2]]] <- TRUE
}
}else if(length(split_name) == 3){
mode <- paste0(split_name[2], "-", split_name[3])
}else{
mode <- NULL
}
simulate_prior[["mode"]] <- mode
sub_method <- split_name[1]
sub_method
############################################################################
########################### Estimate Parameters ############################
############################################################################
env <- asNamespace("simmethods")
estimate_function_name <- paste0(sub_method, "_estimation")
assign(estimate_function_name, get(estimate_function_name, envir = env))
### prior information for estimation when it is unavailable
estimate_prior <- simulate_prior
if(sub_method == "scDesign3"){
if(is.null(prior_info$group.condition)){
if(!is.null(prior_info$group_num)){
estimate_prior[["group.condition"]] <- sample(1:prior_info$group_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["group.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
if(sub_method == "Lun2" | sub_method == "scDesign3"){
if(is.null(prior_info$batch.condition)){
if(!is.null(prior_info$batch_num)){
estimate_prior[["batch.condition"]] <- sample(1:prior_info$batch_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["batch.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
##### spatial info
if(method == "SRTsim" & is.null(prior_info$spatial.x) |
method == "SRTsim" & is.null(prior_info$spatial.y) |
method == "scDesign3" & is.null(prior_info$spatial.x) & "spatial" %in% input$functionality |
method == "scDesign3" & is.null(prior_info$spatial.y) & "spatial" %in% input$functionality){
estimate_prior[["spatial.x"]] <- 1:ncol(ref_data)
estimate_prior[["spatial.y"]] <- 1:ncol(ref_data)
}
estimation_prior <- list(ref_data = ref_data,
other_prior = list(group.condition = estimate_prior$group.condition,
batch.condition = estimate_prior$batch.condition),
verbose = FALSE,
seed = as.integer(runif(1, min = 1, max = .Machine$integer.max)))
arguments <- estimation_prior[intersect(names(estimation_prior), names(formals(estimate_function_name)))]
View(arguments)
estimated_parameters <- do.call(estimate_function_name, arguments)
parameters <- estimated_parameters$estimate_result
############################################################################
############################ Simulate Datasets #############################
############################################################################
### simulation function
simulate_function_name <- paste0(sub_method, "_simulation")
assign(simulate_function_name, get(simulate_function_name, envir = env))
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
View(new_prior)
new_prior <- change_parameter_value(new_prior)
View(new_prior)
### add trajectory parameters
if(isTRUE(simulate_prior$paths)){
new_prior[["paths"]] <- TRUE
}
if(isTRUE(simulate_prior$tree) | isTRUE(simulate_prior$traj)){
new_prior[["traj"]] <- TRUE
}
if(!is.null(simulate_prior$mode)){
new_prior[["mode"]] <- simulate_prior$mode
}
### change parameters
if(!is.null(new_prior)){
if(sub_method == "ESCO"){
if(length(parameters) == 3){
tree <- parameters[["tree"]]
group <- parameters[["group"]]
parameters <- set_parameters(parameters = parameters[["estimate_result"]],
other_prior = new_prior,
method = sub_method)
parameters <- list("tree" = tree,
"group" = group,
"estimate_result" = parameters)
}else{
parameters <- set_parameters(parameters = parameters,
other_prior = new_prior,
method = sub_method)
}
}else{
parameters <- set_parameters(parameters = parameters,
other_prior = new_prior,
method = sub_method)
}
}
simulation_prior <- list(parameters = parameters,
other_prior = new_prior,
return_format = "list",
verbose = TRUE,
seed = as.integer(stats::runif(1, min = 1, max = .Machine$integer.max)))
arguments <- simulation_prior[intersect(names(simulation_prior), names(formals(simulate_function_name)))]
if(sub_method == "SCRIP"){
arguments[["ref_data"]] <- ref_data
}
View(arguments)
simulated_datasets <- do.call(simulate_function_name, arguments)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
library(simshiny)
run_app()
ref_data <- simshiny::data
prior_info <- NULL
method <- "SPARSim"
cell_num <- 100
gene_num <- 200
group_num <-1
DEGs_prop <-0.2
batch_num <-2
### method split and simulate prior
simulate_prior <- list(cell_num = cell_num,
gene_num = gene_num,
group_num = group_num,
batch_num = batch_num,
DEGs = DEGs_prop)
# method <- stringr::str_replace(method, pattern = "—", replacement = "-")
split_name <- stringr::str_split(method, "-", simplify = TRUE)[1, ]
if(length(split_name) == 2){
if(split_name[1] == "SCRIP"){
mode <- "BP"
}else{
simulate_prior[[split_name[2]]] <- TRUE
}
}else if(length(split_name) == 3){
mode <- paste0(split_name[2], "-", split_name[3])
}else{
mode <- NULL
}
simulate_prior[["mode"]] <- mode
sub_method <- split_name[1]
############################################################################
########################### Estimate Parameters ############################
############################################################################
env <- asNamespace("simmethods")
estimate_function_name <- paste0(sub_method, "_estimation")
assign(estimate_function_name, get(estimate_function_name, envir = env))
### prior information for estimation when it is unavailable
estimate_prior <- simulate_prior
if(sub_method == "scDesign3"){
if(is.null(prior_info$group.condition)){
if(!is.null(prior_info$group_num)){
estimate_prior[["group.condition"]] <- sample(1:prior_info$group_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["group.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
if(sub_method == "Lun2" | sub_method == "scDesign3"){
if(is.null(prior_info$batch.condition)){
if(!is.null(prior_info$batch_num)){
estimate_prior[["batch.condition"]] <- sample(1:prior_info$batch_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["batch.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
##### spatial info
if(method == "SRTsim" & is.null(prior_info$spatial.x) |
method == "SRTsim" & is.null(prior_info$spatial.y) |
method == "scDesign3" & is.null(prior_info$spatial.x) & "spatial" %in% input$functionality |
method == "scDesign3" & is.null(prior_info$spatial.y) & "spatial" %in% input$functionality){
estimate_prior[["spatial.x"]] <- 1:ncol(ref_data)
estimate_prior[["spatial.y"]] <- 1:ncol(ref_data)
}
estimation_prior <- list(ref_data = ref_data,
other_prior = list(group.condition = estimate_prior$group.condition,
batch.condition = estimate_prior$batch.condition),
verbose = FALSE,
seed = as.integer(runif(1, min = 1, max = .Machine$integer.max)))
arguments <- estimation_prior[intersect(names(estimation_prior), names(formals(estimate_function_name)))]
estimated_parameters <- do.call(estimate_function_name, arguments)
parameters <- estimated_parameters$estimate_result
############################################################################
############################ Simulate Datasets #############################
############################################################################
### simulation function
simulate_function_name <- paste0(sub_method, "_simulation")
assign(simulate_function_name, get(simulate_function_name, envir = env))
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
devtools::load_all()
devtools::document()
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
View(new_prior)
new_prior <- change_parameter_value(new_prior)
View(new_prior)
new_prior[["batch.condition"]]
### add trajectory parameters
if(isTRUE(simulate_prior$paths)){
new_prior[["paths"]] <- TRUE
}
if(isTRUE(simulate_prior$tree) | isTRUE(simulate_prior$traj)){
new_prior[["traj"]] <- TRUE
}
if(!is.null(simulate_prior$mode)){
new_prior[["mode"]] <- simulate_prior$mode
}
### change parameters
if(!is.null(new_prior)){
if(sub_method == "ESCO"){
if(length(parameters) == 3){
tree <- parameters[["tree"]]
group <- parameters[["group"]]
parameters <- set_parameters(parameters = parameters[["estimate_result"]],
other_prior = new_prior,
method = sub_method)
parameters <- list("tree" = tree,
"group" = group,
"estimate_result" = parameters)
}else{
parameters <- set_parameters(parameters = parameters,
other_prior = new_prior,
method = sub_method)
}
}else{
parameters <- set_parameters(parameters = parameters,
other_prior = new_prior,
method = sub_method)
}
}
simulation_prior <- list(parameters = parameters,
other_prior = new_prior,
return_format = "list",
verbose = TRUE,
seed = as.integer(stats::runif(1, min = 1, max = .Machine$integer.max)))
arguments <- simulation_prior[intersect(names(simulation_prior), names(formals(simulate_function_name)))]
if(sub_method == "SCRIP"){
arguments[["ref_data"]] <- ref_data
}
simulated_datasets <- do.call(simulate_function_name, arguments)
View(arguments)
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
### some methods can only specify the number of cell groups or batches in the estimation step
estimate_prior <- predetermine_parameters(method, estimate_prior)
View(estimation_prior)
### prior information for estimation when it is unavailable
estimate_prior <- simulate_prior
if(sub_method == "scDesign3"){
if(is.null(prior_info$group.condition)){
if(!is.null(prior_info$group_num)){
estimate_prior[["group.condition"]] <- sample(1:prior_info$group_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["group.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
if(sub_method == "Lun2" | sub_method == "scDesign3"){
if(is.null(prior_info$batch.condition)){
if(!is.null(prior_info$batch_num)){
estimate_prior[["batch.condition"]] <- sample(1:prior_info$batch_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["batch.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
##### spatial info
if(method == "SRTsim" & is.null(prior_info$spatial.x) |
method == "SRTsim" & is.null(prior_info$spatial.y) |
method == "scDesign3" & is.null(prior_info$spatial.x) & "spatial" %in% input$functionality |
method == "scDesign3" & is.null(prior_info$spatial.y) & "spatial" %in% input$functionality){
estimate_prior[["spatial.x"]] <- 1:ncol(ref_data)
estimate_prior[["spatial.y"]] <- 1:ncol(ref_data)
}
### some methods can only specify the number of cell groups or batches in the estimation step
estimate_prior <- predetermine_parameters(method, estimate_prior)
View(estimation_prior)
View(estimated_parameters)
View(estimate_prior)
group_num <-2
DEGs_prop <-0.2
batch_num <-1
############################################################################
############################ Prior information #############################
############################################################################
if(is.null(prior_info)){
prior_info <- NULL
}
### method split and simulate prior
simulate_prior <- list(cell_num = cell_num,
gene_num = gene_num,
group_num = group_num,
batch_num = batch_num,
DEGs = DEGs_prop)
# method <- stringr::str_replace(method, pattern = "—", replacement = "-")
split_name <- stringr::str_split(method, "-", simplify = TRUE)[1, ]
if(length(split_name) == 2){
if(split_name[1] == "SCRIP"){
mode <- "BP"
}else{
simulate_prior[[split_name[2]]] <- TRUE
}
}else if(length(split_name) == 3){
mode <- paste0(split_name[2], "-", split_name[3])
}else{
mode <- NULL
}
simulate_prior[["mode"]] <- mode
sub_method <- split_name[1]
### start the spinner
shinycssloaders::showPageSpinner(caption = paste0("Simulating data using ", method, "...Please wait...", sub_method))
############################################################################
########################### Estimate Parameters ############################
############################################################################
env <- asNamespace("simmethods")
estimate_function_name <- paste0(sub_method, "_estimation")
assign(estimate_function_name, get(estimate_function_name, envir = env))
### prior information for estimation when it is unavailable
estimate_prior <- simulate_prior
if(sub_method == "scDesign3"){
if(is.null(prior_info$group.condition)){
if(!is.null(prior_info$group_num)){
estimate_prior[["group.condition"]] <- sample(1:prior_info$group_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["group.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
if(sub_method == "Lun2" | sub_method == "scDesign3"){
if(is.null(prior_info$batch.condition)){
if(!is.null(prior_info$batch_num)){
estimate_prior[["batch.condition"]] <- sample(1:prior_info$batch_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["batch.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
}
##### spatial info
if(method == "SRTsim" & is.null(prior_info$spatial.x) |
method == "SRTsim" & is.null(prior_info$spatial.y) |
method == "scDesign3" & is.null(prior_info$spatial.x) & "spatial" %in% input$functionality |
method == "scDesign3" & is.null(prior_info$spatial.y) & "spatial" %in% input$functionality){
estimate_prior[["spatial.x"]] <- 1:ncol(ref_data)
estimate_prior[["spatial.y"]] <- 1:ncol(ref_data)
}
View(estimate_prior)
### some methods can only specify the number of cell groups or batches in the estimation step
estimate_prior <- predetermine_parameters(method, estimate_prior)
View(estimate_prior)
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
library(simshiny)
run_app()
devtools::load_all()
devtools::document()
run_app()
devtools::document()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
library(simshiny)
devtools::document()
devtools::check()
library(simshiny)
devtools::load_all()
run_app()
blogdown:::serve_site()
devtools::document()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::document()
library(simshiny)
