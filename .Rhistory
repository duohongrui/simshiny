if(is.null(prior_info$group.condition)){
estimate_prior[["group.condition"]] <- 1
estimate_prior <- change_parameter_value(estimate_prior)
}
View(estimate_prior)
is.null(prior_info$batch.condition)
estimate_prior[["batch.condition"]] <- 1
estimate_prior <- change_parameter_value(estimate_prior)
View(estimate_prior)
estimation_prior <- list(ref_data = ref_data,
other_prior = list(group.condition = estimate_prior$group.condition,
batch.condition = estimate_prior$batch.condition),
verbose = FALSE,
seed = as.integer(runif(1, min = 1, max = .Machine$integer.max)))
arguments <- estimation_prior[intersect(names(estimation_prior), names(formals(estimate_function_name)))]
estimated_parameters <- do.call(estimate_function_name, arguments)
devtools::document()
devtools::load_all()
run_app()
install.packages("shinycssloaders")
？shinycssloaders::withSpinner
?shinycssloaders::withSpinner
devtools::load_all()
run_app()
usethis::use_package("shinycssloaders")
devtools::document()
devtools::load_all()
run_app()
remove.packages("shinycssloaders")
devtools::install_github("daattali/shinycssloaders")
remotes::install_github("daattali/shinycssloaders")
devtools::document()
devtools::load_all()
run_app()
?shinycssloaders::showPageSpinner
devtools::load_all()
run_app()
devtools::load_all()
run_app()
ref_data <- simshiny::data
method <- "Splat-paths"
prior_info <- NULL
cell_num <- 2000
cell_num <- 500
gene_num <- 1000
group_num <- NULL
DEGs_prop <- 0
batch_num <- 2
DEGs_prop <- NULL
batch_num <- NULL
############################################################################
############################ Prior information #############################
############################################################################
if(is.null(prior_info)){
prior_info <- NULL
}
### method split and simulate prior
simulate_prior <- list(cell_num = cell_num,
gene_num = gene_num,
group_num = group_num,
batch_num = batch_num,
DEGs = DEGs_prop)
split_name <- stringr::str_split(method, "-", simplify = TRUE)[1, ]
if(length(split_name) == 2){
if(split_name[1] == "SCRIP"){
mode <- "BP"
}else{
simulate_prior[[split_name[2]]] <- TRUE
}
}else if(length(split_name) == 3){
mode <- paste0(split_name[2], "-", split_name[3])
}else{
mode <- NULL
}
simulate_prior[["mode"]] <- mode
sub_method <- split_name[1]
sub_method
View(simulate_prior)
############################################################################
########################### Estimate Parameters ############################
############################################################################
env <- asNamespace("simmethods")
estimate_function_name <- paste0(sub_method, "_estimation")
assign(estimate_function_name, get(estimate_function_name, envir = env))
### prior information for estimation when it is unavailable
estimate_prior <- simulate_prior
if(is.null(prior_info$group.condition)){
if(!is.null(prior_info$group_num)){
estimate_prior[["group.condition"]] <- sample(1:prior_info$group_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["group.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
if(is.null(prior_info$batch.condition)){
if(!is.null(prior_info$batch_num)){
estimate_prior[["batch.condition"]] <- sample(1:prior_info$batch_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["batch.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
estimation_prior <- list(ref_data = ref_data,
other_prior = list(group.condition = estimate_prior$group.condition,
batch.condition = estimate_prior$batch.condition),
verbose = FALSE,
seed = as.integer(runif(1, min = 1, max = .Machine$integer.max)))
arguments <- estimation_prior[intersect(names(estimation_prior), names(formals(estimate_function_name)))]
estimated_parameters <- do.call(estimate_function_name, arguments)
parameters <- estimated_parameters$estimate_result
############################################################################
############################ Simulate Datasets #############################
############################################################################
### simulation function
simulate_function_name <- paste0(sub_method, "_simulation")
simulate_function_name
assign(simulate_function_name, get(simulate_function_name, envir = env))
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
new_prior <- change_parameter_value(new_prior)
### change parameters
if(!is.null(new_prior)){
if(sub_method == "ESCO"){
if(length(parameters) == 3){
tree <- parameters[["tree"]]
group <- parameters[["group"]]
parameters <- set_parameters(parameters = parameters[["estimate_result"]],
other_prior = new_prior,
method = sub_method)
parameters <- list("tree" = tree,
"group" = group,
"estimate_result" = parameters)
}else{
parameters <- set_parameters(parameters = parameters,
other_prior = new_prior,
method = sub_method)
}
}else{
parameters <- set_parameters(parameters = parameters,
other_prior = new_prior,
method = sub_method)
}
}
simulation_prior <- list(parameters = parameters,
other_prior = new_prior,
return_format = "list",
verbose = FALSE,
seed = as.integer(stats::runif(1, min = 1, max = .Machine$integer.max)))
arguments <- simulation_prior[intersect(names(simulation_prior), names(formals(simulate_function_name)))]
View(arguments)
simulated_datasets <- do.call(simulate_function_name, arguments)
simulation_prior <- list(parameters = parameters,
other_prior = new_prior,
return_format = "list",
verbose = TRUE,
seed = as.integer(stats::runif(1, min = 1, max = .Machine$integer.max)))
arguments <- simulation_prior[intersect(names(simulation_prior), names(formals(simulate_function_name)))]
simulated_datasets <- do.call(simulate_function_name, arguments)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
method
stringr::str_split(method, "-", simplify = TRUE)
stringr::str_split(method, "-", simplify = TRUE)[1, ]
devtools::load_all()
run_app()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
error <- try({
"a" + 1
}, silent = TRUE)
error
methods::is(error, "try-error")
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
### method split and simulate prior
simulate_prior <- list(cell_num = cell_num,
gene_num = gene_num,
group_num = group_num,
batch_num = batch_num,
DEGs = DEGs_prop)
split_name <- stringr::str_split(method, "−", simplify = TRUE)[1, ]
method
split_name <- stringr::str_split(method, "−", simplify = TRUE)[1, ]
if(length(split_name) == 2){
if(split_name[1] == "SCRIP"){
mode <- "BP"
}else{
simulate_prior[[split_name[2]]] <- TRUE
}
}else if(length(split_name) == 3){
mode <- paste0(split_name[2], "-", split_name[3])
}else{
mode <- NULL
}
simulate_prior[["mode"]] <- mode
sub_method <- split_name[1]
View(simulate_prior)
View(simulate_prior)
### method split and simulate prior
simulate_prior <- list(cell_num = cell_num,
gene_num = gene_num,
group_num = group_num,
batch_num = batch_num,
DEGs = DEGs_prop)
split_name <- stringr::str_split(method, "−", simplify = TRUE)[1, ]
if(length(split_name) == 2){
if(split_name[1] == "SCRIP"){
mode <- "BP"
}else{
simulate_prior[[split_name[2]]] <- TRUE
}
}else if(length(split_name) == 3){
mode <- paste0(split_name[2], "-", split_name[3])
}else{
mode <- NULL
}
simulate_prior[["mode"]] <- mode
sub_method <- split_name[1]
simulate_prior
length(split_name) == 2
split_name
sub_method
split_name <- stringr::str_split(method, "-", simplify = TRUE)[1, ]
if(length(split_name) == 2){
if(split_name[1] == "SCRIP"){
mode <- "BP"
}else{
simulate_prior[[split_name[2]]] <- TRUE
}
}else if(length(split_name) == 3){
mode <- paste0(split_name[2], "-", split_name[3])
}else{
mode <- NULL
}
simulate_prior[["mode"]] <- mode
sub_method <- split_name[1]
View(simulate_prior)
method
isTRUE(simulate_prior$paths)
isTRUE(simulate_prior$aaa)
############################################################################
########################### Estimate Parameters ############################
############################################################################
env <- asNamespace("simmethods")
estimate_function_name <- paste0(sub_method, "_estimation")
assign(estimate_function_name, get(estimate_function_name, envir = env))
### prior information for estimation when it is unavailable
estimate_prior <- simulate_prior
if(is.null(prior_info$group.condition)){
if(!is.null(prior_info$group_num)){
estimate_prior[["group.condition"]] <- sample(1:prior_info$group_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["group.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
if(is.null(prior_info$batch.condition)){
if(!is.null(prior_info$batch_num)){
estimate_prior[["batch.condition"]] <- sample(1:prior_info$batch_num, ncol(ref_data), TRUE)
}else{
estimate_prior[["batch.condition"]] <- sample(1:2, ncol(ref_data), TRUE)
}
}
estimation_prior <- list(ref_data = ref_data,
other_prior = list(group.condition = estimate_prior$group.condition,
batch.condition = estimate_prior$batch.condition),
verbose = FALSE,
seed = as.integer(runif(1, min = 1, max = .Machine$integer.max)))
arguments <- estimation_prior[intersect(names(estimation_prior), names(formals(estimate_function_name)))]
estimated_parameters <- do.call(estimate_function_name, arguments)
parameters <- estimated_parameters$estimate_result
############################################################################
############################ Simulate Datasets #############################
############################################################################
### simulation function
simulate_function_name <- paste0(sub_method, "_simulation")
assign(simulate_function_name, get(simulate_function_name, envir = env))
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
new_prior <- change_parameter_value(new_prior)
View(simulate_prior)
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
simulate_prior
method
method == "Splat−paths"
"Splat-paths" == "Splat−paths"
"Splat−paths" == "Splat−paths"
method <- "Splat−paths"
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
View(new_prior)
new_prior <- change_parameter_value(new_prior)
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
new_prior
devtools::load_all()
### check parameter names
new_prior <- parameter_name_check(method = method,
other_prior = simulate_prior,
original_name = TRUE,
function_name = TRUE)
View(new_prior)
method == "Splat−paths"
"-" == "-"
other_prior <- simulate_prior
View(other_prior)
!is.null(other_prior)
parameter_names <- names(other_prior)
method_parameters <- method_parameters()
new_prior <- NULL
parameter_names
i <- parameter_names[1]
sub_menu <- names(method_parameters[[i]])
sub_menu
j <- sub_menu[1]
method %in% method_parameters[[i]][[j]]
new_prior[[i]] <- other_prior[[i]]
View(new_prior)
new_prior[[j]] <- other_prior[[i]]
View(new_prior)
if(!is.null(other_prior)){
parameter_names <- names(other_prior)
method_parameters <- method_parameters()
new_prior <- NULL
for(i in parameter_names){
sub_menu <- names(method_parameters[[i]])
for(j in sub_menu){
### If not match, which means the method do not have this setting
if(method %in% method_parameters[[i]][[j]]){
if(original_name){
new_prior[[i]] <- other_prior[[i]]
}
new_prior[[j]] <- other_prior[[i]]
}
}
}
return(new_prior)
}else{
return(NULL)
}
original_name <- TRUE
function_name <- TRUE
if(!is.null(other_prior)){
parameter_names <- names(other_prior)
method_parameters <- method_parameters()
new_prior <- NULL
for(i in parameter_names){
sub_menu <- names(method_parameters[[i]])
for(j in sub_menu){
### If not match, which means the method do not have this setting
if(method %in% method_parameters[[i]][[j]]){
if(original_name){
new_prior[[i]] <- other_prior[[i]]
}
new_prior[[j]] <- other_prior[[i]]
}
}
}
return(new_prior)
}else{
return(NULL)
}
if(!is.null(other_prior)){
parameter_names <- names(other_prior)
method_parameters <- method_parameters()
new_prior <- NULL
for(i in parameter_names){
sub_menu <- names(method_parameters[[i]])
for(j in sub_menu){
### If not match, which means the method do not have this setting
if(method %in% method_parameters[[i]][[j]]){
if(original_name){
new_prior[[i]] <- other_prior[[i]]
}
new_prior[[j]] <- other_prior[[i]]
}
}
}
return(new_prior)
}else{
return(NULL)
}
parameter_names <- names(other_prior)
method_parameters <- method_parameters()
new_prior <- NULL
for(i in parameter_names){
sub_menu <- names(method_parameters[[i]])
for(j in sub_menu){
### If not match, which means the method do not have this setting
if(method %in% method_parameters[[i]][[j]]){
if(original_name){
new_prior[[i]] <- other_prior[[i]]
}
new_prior[[j]] <- other_prior[[i]]
}
}
}
View(new_prior)
parameter_names
parameter_names <- names(other_prior)
method_parameters <- method_parameters()
new_prior <- NULL
for(i in parameter_names){
if(is.null(other_prior[[i]])){
next
}
sub_menu <- names(method_parameters[[i]])
for(j in sub_menu){
### If not match, which means the method do not have this setting
if(method %in% method_parameters[[i]][[j]]){
if(original_name){
new_prior[[i]] <- other_prior[[i]]
}
new_prior[[j]] <- other_prior[[i]]
}
}
}
View(new_prior)
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
a <- try({"a"+1}, silent = TRUE)
a
as.character(a)
devtools::load_all()
run_app()
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
View(arguments)
devtools::document()
devtools::load_all()
run_app()
devtools::document()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::check()
devtools::load_all()
run_app()
